/* The following code was generated by JFlex 1.3.5 on 07/04/16 9:32 PM */

package com.madebyjeffrey;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;
import java.util.stream.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 07/04/16 9:32 PM from the specification file
 * <tt>file:/C:/Users/Nikola/workspace2/Lab3/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\10\1\3\1\1\22\0\1\3\1\6\1\16"+
    "\1\15\1\14\3\0\1\11\1\13\1\17\1\0\1\6\3\0\12\4"+
    "\1\12\1\6\3\0\1\6\1\20\1\25\1\35\1\46\1\42\1\27"+
    "\1\33\1\44\1\43\1\22\1\5\1\30\1\31\1\21\1\37\1\36"+
    "\1\26\1\5\1\34\1\40\1\24\1\45\1\47\1\41\1\23\1\32"+
    "\1\5\4\0\1\7\1\0\1\25\1\35\1\46\1\42\1\27\1\33"+
    "\1\44\1\43\1\22\1\5\1\30\1\31\1\21\1\37\1\36\1\26"+
    "\1\5\1\34\1\40\1\24\1\45\1\47\1\41\1\23\1\32\1\5"+
    "\12\0\1\10\u1fa2\0\1\10\1\10\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    40,    80,    40,   120,   160,    40,   200,    40,   240, 
      280,    40,    40,    40,    40,    40,   320,   360,   400,   440, 
      480,   520,   560,   600,   640,   680,   720,   760,   800,   840, 
      880,   920,   160,   200,    40,    40,   960,  1000,  1040,  1080, 
     1120,  1160,  1200,  1240,  1280,  1320,  1360,  1400,  1440,  1480, 
     1520,  1560,  1600,  1640,  1680,  1720,  1760,  1800,  1840,  1880, 
     1920,  1960,  2000,  2040,   160,  2080,  2120,  2160,   160,  2200, 
     2240,   160,  2280,  2320,  2360,  2400,  2440,  2480,   160,  2520, 
     2560,  2600,   160,  2640,  2680,  2720,   160,  2760,  2800,  2840, 
     2880,  2920,  2960,  3000,   160,  3040,  3080,  3120,  3160,  3200, 
     3240,  3280,   160,  3320,   160,  3360,  3400,  3440,  3480,  3520, 
      160,   160,  3560,  3600,  3640,   160,  3680,  3720,  3760,  3800, 
     3840,  3880,  3920,   160,  3960,  4000,   160,   160,   160,  4040, 
      160,  4080,  4120,   160,  4160,  4200,  4240,   160,  4280,   160, 
     4320,  4360,   160,  4400,  4440,  4480,  4520,  4560,  4600,   160, 
     4640,  4680,   160,  4720,   160,   160,  4760,  4800,  4840,  4880, 
     4920,   160
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\2\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\2\6\1\22\1\23\1\24\2\6\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\6\1\37\1\6\1\40\1\6\52\0\1\4\51\0"+
    "\1\5\47\0\2\41\1\0\1\41\11\0\27\41\4\0"+
    "\2\42\13\0\27\42\12\0\1\43\50\0\1\44\40\0"+
    "\2\41\1\0\1\41\11\0\1\41\1\45\25\41\4\0"+
    "\2\41\1\0\1\41\11\0\22\41\1\46\1\41\1\47"+
    "\2\41\4\0\2\41\1\0\1\41\11\0\7\41\1\50"+
    "\17\41\4\0\2\41\1\0\1\41\11\0\4\41\1\51"+
    "\3\41\1\52\2\41\1\53\13\41\4\0\2\41\1\0"+
    "\1\41\11\0\1\41\1\54\25\41\4\0\2\41\1\0"+
    "\1\41\11\0\15\41\1\55\11\41\4\0\2\41\1\0"+
    "\1\41\11\0\1\41\1\56\25\41\4\0\2\41\1\0"+
    "\1\41\11\0\6\41\1\57\20\41\4\0\2\41\1\0"+
    "\1\41\11\0\4\41\1\60\10\41\1\61\11\41\4\0"+
    "\2\41\1\0\1\41\11\0\3\41\1\62\12\41\1\63"+
    "\10\41\4\0\2\41\1\0\1\41\11\0\15\41\1\64"+
    "\11\41\4\0\2\41\1\0\1\41\11\0\15\41\1\65"+
    "\11\41\4\0\2\41\1\0\1\41\11\0\1\41\1\66"+
    "\4\41\1\67\6\41\1\70\11\41\4\0\2\41\1\0"+
    "\1\41\11\0\4\41\1\71\1\41\1\72\20\41\4\0"+
    "\2\41\1\0\1\41\11\0\6\41\1\73\20\41\4\0"+
    "\2\41\1\0\1\41\11\0\22\41\1\74\1\41\1\75"+
    "\2\41\4\0\2\41\1\0\1\41\11\0\2\41\1\76"+
    "\24\41\4\0\2\41\1\0\1\41\11\0\13\41\1\77"+
    "\13\41\4\0\2\41\1\0\1\41\11\0\13\41\1\100"+
    "\13\41\4\0\2\41\1\0\1\41\11\0\4\41\1\101"+
    "\22\41\4\0\2\41\1\0\1\41\11\0\13\41\1\102"+
    "\13\41\4\0\2\41\1\0\1\41\11\0\4\41\1\103"+
    "\22\41\4\0\2\41\1\0\1\41\11\0\6\41\1\104"+
    "\20\41\4\0\2\41\1\0\1\41\11\0\3\41\1\105"+
    "\23\41\4\0\2\41\1\0\1\41\11\0\17\41\1\106"+
    "\7\41\4\0\2\41\1\0\1\41\11\0\13\41\1\107"+
    "\13\41\4\0\2\41\1\0\1\41\11\0\7\41\1\110"+
    "\17\41\4\0\2\41\1\0\1\41\11\0\10\41\1\111"+
    "\16\41\4\0\2\41\1\0\1\41\11\0\16\41\1\112"+
    "\5\41\1\113\2\41\4\0\2\41\1\0\1\41\11\0"+
    "\22\41\1\114\4\41\4\0\2\41\1\0\1\41\11\0"+
    "\1\115\26\41\4\0\2\41\1\0\1\41\11\0\3\41"+
    "\1\116\23\41\4\0\2\41\1\0\1\41\11\0\16\41"+
    "\1\117\10\41\4\0\2\41\1\0\1\41\11\0\16\41"+
    "\1\120\10\41\4\0\2\41\1\0\1\41\11\0\4\41"+
    "\1\121\22\41\4\0\2\41\1\0\1\41\11\0\13\41"+
    "\1\122\13\41\4\0\2\41\1\0\1\41\11\0\14\41"+
    "\1\123\12\41\4\0\2\41\1\0\1\41\11\0\4\41"+
    "\1\124\22\41\4\0\2\41\1\0\1\41\11\0\3\41"+
    "\1\125\23\41\4\0\2\41\1\0\1\41\11\0\6\41"+
    "\1\126\20\41\4\0\2\41\1\0\1\41\11\0\3\41"+
    "\1\127\23\41\4\0\2\41\1\0\1\41\11\0\3\41"+
    "\1\130\23\41\4\0\2\41\1\0\1\41\11\0\15\41"+
    "\1\131\11\41\4\0\2\41\1\0\1\41\11\0\16\41"+
    "\1\132\10\41\4\0\2\41\1\0\1\41\11\0\3\41"+
    "\1\133\23\41\4\0\2\41\1\0\1\41\11\0\11\41"+
    "\1\134\15\41\4\0\2\41\1\0\1\41\11\0\4\41"+
    "\1\135\22\41\4\0\2\41\1\0\1\41\11\0\6\41"+
    "\1\136\20\41\4\0\2\41\1\0\1\41\11\0\6\41"+
    "\1\137\20\41\4\0\2\41\1\0\1\41\11\0\10\41"+
    "\1\140\16\41\4\0\2\41\1\0\1\41\11\0\6\41"+
    "\1\141\20\41\4\0\2\41\1\0\1\41\11\0\16\41"+
    "\1\142\10\41\4\0\2\41\1\0\1\41\11\0\6\41"+
    "\1\143\20\41\4\0\2\41\1\0\1\41\11\0\11\41"+
    "\1\144\15\41\4\0\2\41\1\0\1\41\11\0\10\41"+
    "\1\145\16\41\4\0\2\41\1\0\1\41\11\0\16\41"+
    "\1\146\10\41\4\0\2\41\1\0\1\41\11\0\7\41"+
    "\1\147\17\41\4\0\2\41\1\0\1\41\11\0\21\41"+
    "\1\150\5\41\4\0\2\41\1\0\1\41\11\0\21\41"+
    "\1\151\5\41\4\0\2\41\1\0\1\41\11\0\1\152"+
    "\26\41\4\0\2\41\1\0\1\41\11\0\25\41\1\153"+
    "\1\41\4\0\2\41\1\0\1\41\11\0\4\41\1\154"+
    "\22\41\4\0\2\41\1\0\1\41\11\0\20\41\1\155"+
    "\6\41\4\0\2\41\1\0\1\41\11\0\24\41\1\156"+
    "\2\41\4\0\2\41\1\0\1\41\11\0\11\41\1\157"+
    "\15\41\4\0\2\41\1\0\1\41\11\0\4\41\1\160"+
    "\22\41\4\0\2\41\1\0\1\41\11\0\25\41\1\161"+
    "\1\41\4\0\2\41\1\0\1\41\11\0\20\41\1\162"+
    "\6\41\4\0\2\41\1\0\1\41\11\0\15\41\1\163"+
    "\11\41\4\0\2\41\1\0\1\41\11\0\17\41\1\164"+
    "\7\41\4\0\2\41\1\0\1\41\11\0\25\41\1\165"+
    "\1\41\4\0\2\41\1\0\1\41\11\0\13\41\1\166"+
    "\13\41\4\0\2\41\1\0\1\41\11\0\10\41\1\167"+
    "\16\41\4\0\2\41\1\0\1\41\11\0\1\41\1\170"+
    "\25\41\4\0\2\41\1\0\1\41\11\0\1\41\1\171"+
    "\25\41\4\0\2\41\1\0\1\41\11\0\15\41\1\172"+
    "\11\41\4\0\2\41\1\0\1\41\11\0\15\41\1\173"+
    "\11\41\4\0\2\41\1\0\1\41\11\0\7\41\1\174"+
    "\17\41\4\0\2\41\1\0\1\41\11\0\5\41\1\175"+
    "\21\41\4\0\2\41\1\0\1\41\11\0\1\176\26\41"+
    "\4\0\2\41\1\0\1\41\11\0\5\41\1\177\21\41"+
    "\4\0\2\41\1\0\1\41\11\0\22\41\1\200\4\41"+
    "\4\0\2\41\1\0\1\41\11\0\12\41\1\201\14\41"+
    "\4\0\2\41\1\0\1\41\11\0\24\41\1\202\2\41"+
    "\4\0\2\41\1\0\1\41\11\0\6\41\1\203\20\41"+
    "\4\0\2\41\1\0\1\41\11\0\10\41\1\204\16\41"+
    "\4\0\2\41\1\0\1\41\11\0\6\41\1\205\20\41"+
    "\4\0\2\41\1\0\1\41\11\0\3\41\1\206\23\41"+
    "\4\0\2\41\1\0\1\41\11\0\16\41\1\207\10\41"+
    "\4\0\2\41\1\0\1\41\11\0\16\41\1\210\10\41"+
    "\4\0\2\41\1\0\1\41\11\0\16\41\1\211\10\41"+
    "\4\0\2\41\1\0\1\41\11\0\6\41\1\212\20\41"+
    "\4\0\2\41\1\0\1\41\11\0\15\41\1\213\11\41"+
    "\4\0\2\41\1\0\1\41\11\0\3\41\1\214\23\41"+
    "\4\0\2\41\1\0\1\41\11\0\6\41\1\215\20\41"+
    "\4\0\2\41\1\0\1\41\11\0\26\41\1\216\4\0"+
    "\2\41\1\0\1\41\11\0\23\41\1\217\3\41\4\0"+
    "\2\41\1\0\1\41\11\0\3\41\1\220\23\41\4\0"+
    "\2\41\1\0\1\41\11\0\6\41\1\221\20\41\4\0"+
    "\2\41\1\0\1\41\11\0\16\41\1\222\10\41\4\0"+
    "\2\41\1\0\1\41\11\0\26\41\1\223\4\0\2\41"+
    "\1\0\1\41\11\0\6\41\1\224\20\41\4\0\2\41"+
    "\1\0\1\41\11\0\22\41\1\225\4\41\4\0\2\41"+
    "\1\0\1\41\11\0\11\41\1\226\15\41\4\0\2\41"+
    "\1\0\1\41\11\0\6\41\1\227\20\41\4\0\2\41"+
    "\1\0\1\41\11\0\6\41\1\230\20\41\4\0\2\41"+
    "\1\0\1\41\11\0\10\41\1\231\16\41\4\0\2\41"+
    "\1\0\1\41\11\0\4\41\1\232\22\41\4\0\2\41"+
    "\1\0\1\41\11\0\11\41\1\233\15\41\4\0\2\41"+
    "\1\0\1\41\11\0\10\41\1\234\16\41\4\0\2\41"+
    "\1\0\1\41\11\0\17\41\1\235\7\41\4\0\2\41"+
    "\1\0\1\41\11\0\3\41\1\236\23\41\4\0\2\41"+
    "\1\0\1\41\11\0\13\41\1\237\13\41\4\0\2\41"+
    "\1\0\1\41\11\0\6\41\1\240\20\41\4\0\2\41"+
    "\1\0\1\41\11\0\6\41\1\241\20\41\4\0\2\41"+
    "\1\0\1\41\11\0\3\41\1\242\23\41";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  1,  9,  1,  1,  9,  1,  9,  1,  1,  9,  9,  9,  9,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	private String filename;
	public String getFilename() {
		return filename;
	}

    public void setFilename(String filename) {
        this.filename = filename;
    }


    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(new InputStreamReader(is));
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }

    private StringBuffer string = new StringBuffer();
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(filename, yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(filename, yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code,
						new Location(filename, yyline+1, yycolumn +1, yychar),
						new Location(filename, yyline+1,yycolumn+yylength
						(), yychar+yylength()), lexem);
    }

     private Symbol symbol(String name, int sym, Object val,int buflength) {
          Location left = new Location(yyline+1,yycolumn+yylength()-buflength,yychar+yylength()-buflength);
          Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
          return symbolFactory.newSymbol(name, sym, left, right,val);
     }

    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }

    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" +
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }

    // Removes a prefix, and gets rid of underscores
    protected String filterNumber(String text, int prefix) {
    	return text.substring(prefix).codePoints()
    		.filter(cp -> cp != '_')
    		.collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
    		.toString();
    }

    protected String filterNumber(String text) {
    	return filterNumber(text, 0);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[4960];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 68: 
          {  return symbol("LIT", LIT);  }
        case 163: break;
        case 64: 
          {  return symbol("AKA", AKA);  }
        case 164: break;
        case 71: 
          {  return symbol("REK", REK);  }
        case 165: break;
        case 78: 
          {  return symbol("SON", SON);  }
        case 166: break;
        case 82: 
          {  return symbol("DAB", DAB);  }
        case 167: break;
        case 86: 
          {  return symbol("CUT", CUT);  }
        case 168: break;
        case 14: 
          {  return symbol("STAR", STAR);  }
        case 169: break;
        case 6: 
          {  return symbol("PUNC", PUNC);  }
        case 170: break;
        case 94: 
          {  return symbol("FIRE", FIRE);  }
        case 171: break;
        case 102: 
          {  return symbol("WEAK", WEAK);  }
        case 172: break;
        case 104: 
          {  return symbol("DEAD", DEAD);  }
        case 173: break;
        case 1: 
        case 5: 
        case 7: 
        case 9: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
          {  throw new RuntimeException("Illegal Character \"" + yytext() +
                          "\" at line " + yyline+1 + ", column " + yycolumn+1);  }
        case 174: break;
        case 2: 
        case 3: 
          {   }
        case 175: break;
        case 15: 
          {  return symbol("AT", AT);  }
        case 176: break;
        case 13: 
          {  return symbol("QM", QM);  }
        case 177: break;
        case 8: 
          {  /* end of line */  }
        case 178: break;
        case 137: 
          {  return symbol("MIXTAPE", MIXTAPE);  }
        case 179: break;
        case 126: 
          {  return symbol("TURNUP", TURNUP);  }
        case 180: break;
        case 161: 
          {  return symbol("WORDONTHASTREET", WORDONTHASTREET);  }
        case 181: break;
        case 33: 
          {  return symbol("STREETNAME", STREETNAME);  }
        case 182: break;
        case 12: 
          {  return symbol("HASHTAG", HASHTAG);  }
        case 183: break;
        case 127: 
          {  return symbol("PREACH", PREACH);  }
        case 184: break;
        case 35: 
          {  return symbol("RPAREN", RPAREN);  }
        case 185: break;
        case 34: 
          {  return symbol("LPAREN", LPAREN);  }
        case 186: break;
        case 110: 
          {  return symbol("PARTY", PARTY);  }
        case 187: break;
        case 111: 
          {  return symbol("PLAYA", PLAYA);  }
        case 188: break;
        case 128: 
          {  return symbol("YOSEWF", YOSEWF);  }
        case 189: break;
        case 130: 
          {  return symbol("BOUNCE", BOUNCE);  }
        case 190: break;
        case 133: 
          {  return symbol("NOTLIT", NOTLIT);  }
        case 191: break;
        case 142: 
          {  return symbol("WINNING", WINNING);  }
        case 192: break;
        case 154: 
          {  return symbol("THROWMONEY", THROWMONEY);  }
        case 193: break;
        case 149: 
          {  return symbol("GETMONEY", GETMONEY);  }
        case 194: break;
        case 155: 
          {  return symbol("OTHERLEVEL", OTHERLEVEL);  }
        case 195: break;
        case 152: 
          {  return symbol("ONMYLEVEL", ONMYLEVEL);  }
        case 196: break;
        case 139: 
          {  return symbol("BALLOUT", BALLOUT);  }
        case 197: break;
        case 32: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 65: 
        case 66: 
        case 67: 
        case 69: 
        case 70: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 79: 
        case 80: 
        case 81: 
        case 83: 
        case 84: 
        case 85: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 103: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 112: 
        case 113: 
        case 114: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 124: 
        case 125: 
        case 129: 
        case 131: 
        case 132: 
        case 134: 
        case 135: 
        case 136: 
        case 138: 
        case 140: 
        case 141: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 150: 
        case 151: 
        case 153: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
          {  return symbol("IDENTIFIER", IDENTIFIER);  }
        case 198: break;
        case 4: 
          {  return symbol("DIGIT", DIGIT);  }
        case 199: break;
        case 11: 
          {  return symbol("DOLLA", DOLLA);  }
        case 200: break;
        case 10: 
          {  return symbol("COLON", COLON);  }
        case 201: break;
        case 123: 
          {  return symbol("CHECK", CHECK);  }
        case 202: break;
        case 115: 
          {  return symbol("BONES", BONES);  }
        case 203: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
