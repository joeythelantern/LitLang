
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package com.madebyjeffrey;

import java_cup.runtime.*;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\005\000\002\002\004\000\002\003" +
    "\005\000\002\004\011\000\002\004\010\000\002\005\004" +
    "\000\002\007\005\000\002\007\003\000\002\010\005\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\012\005\000\002\013\005\000\002\013" +
    "\004\000\002\013\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\007\000\002" +
    "\015\006\000\002\016\004\000\002\020\004\000\002\020" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\022\005\000\002\022\006\000\002\022\003\000\002\023" +
    "\006\000\002\023\005\000\002\024\004\000\002\024\005" +
    "\000\002\024\004\000\002\025\003\000\002\025\003\000" +
    "\002\026\007\000\002\027\005\000\002\027\004\000\002" +
    "\030\005\000\002\031\006\000\002\031\011\000\002\031" +
    "\010\000\002\031\013\000\002\032\005\000\002\032\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\004\006\001\002\000\004\002\166\001" +
    "\002\000\004\051\012\001\002\000\004\051\007\001\002" +
    "\000\004\034\010\001\002\000\004\051\uffff\001\002\000" +
    "\004\005\164\001\002\000\004\035\013\001\002\000\006" +
    "\036\015\051\017\001\002\000\006\036\ufffa\040\161\001" +
    "\002\000\004\041\156\001\002\000\004\036\026\001\002" +
    "\000\004\041\020\001\002\000\012\007\022\010\024\011" +
    "\021\012\023\001\002\000\034\006\ufff6\022\ufff6\023\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\036\ufff6\040\ufff6\045\ufff6\001\002\000\034\006\ufff8" +
    "\022\ufff8\023\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\036\ufff8\040\ufff8\045\ufff8\001\002" +
    "\000\034\006\ufff5\022\ufff5\023\ufff5\026\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5\040\ufff5" +
    "\045\ufff5\001\002\000\034\006\ufff7\022\ufff7\023\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\036\ufff7\040\ufff7\045\ufff7\001\002\000\006\036\ufff9\040" +
    "\ufff9\001\002\000\004\041\027\001\002\000\012\007\022" +
    "\010\024\011\021\012\023\001\002\000\004\032\031\001" +
    "\002\000\016\011\037\021\046\024\042\025\035\032\031" +
    "\050\047\001\002\000\004\005\ufffe\001\002\000\014\022" +
    "\uffef\023\uffef\033\uffef\034\uffef\045\uffef\001\002\000\014" +
    "\022\uffec\023\uffec\033\uffec\034\uffec\045\uffec\001\002\000" +
    "\004\035\146\001\002\000\006\033\ufff1\034\144\001\002" +
    "\000\004\050\140\001\002\000\014\022\ufff0\023\ufff0\033" +
    "\ufff0\034\ufff0\045\ufff0\001\002\000\014\022\uffee\023\uffee" +
    "\033\uffee\034\uffee\045\uffee\001\002\000\014\013\064\014" +
    "\067\042\063\050\071\051\070\001\002\000\004\035\125" +
    "\001\002\000\014\022\uffed\023\uffed\033\uffed\034\uffed\045" +
    "\uffed\001\002\000\014\022\uffeb\023\uffeb\033\uffeb\034\uffeb" +
    "\045\uffeb\001\002\000\014\013\064\014\067\042\063\050" +
    "\071\051\070\001\002\000\014\006\053\026\055\027\056" +
    "\030\054\031\060\001\002\000\004\033\052\001\002\000" +
    "\014\022\uffea\023\uffea\033\uffea\034\uffea\045\uffea\001\002" +
    "\000\020\002\ufff4\005\ufff4\022\ufff4\023\ufff4\033\ufff4\034" +
    "\ufff4\045\ufff4\001\002\000\014\013\064\014\067\042\063" +
    "\050\071\051\070\001\002\000\026\013\uffe2\014\uffe2\022" +
    "\uffe2\023\uffe2\033\uffe2\034\uffe2\042\uffe2\045\uffe2\050\uffe2" +
    "\051\uffe2\001\002\000\026\013\uffe4\014\uffe4\022\uffe4\023" +
    "\uffe4\033\uffe4\034\uffe4\042\uffe4\045\uffe4\050\uffe4\051\uffe4" +
    "\001\002\000\026\013\uffe3\014\uffe3\022\uffe3\023\uffe3\033" +
    "\uffe3\034\uffe3\042\uffe3\045\uffe3\050\uffe3\051\uffe3\001\002" +
    "\000\014\022\uffe7\023\uffe7\033\uffe7\034\uffe7\045\uffe7\001" +
    "\002\000\026\013\uffe1\014\uffe1\022\uffe1\023\uffe1\033\uffe1" +
    "\034\uffe1\042\uffe1\045\uffe1\050\uffe1\051\uffe1\001\002\000" +
    "\026\013\uffe5\014\uffe5\022\uffe5\023\uffe5\033\uffe5\034\uffe5" +
    "\042\uffe5\045\uffe5\050\uffe5\051\uffe5\001\002\000\066\006" +
    "\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\036\uffdc\040\uffdc\042\uffdc\045\uffdc\050\uffdc\051\uffdc\001" +
    "\002\000\066\006\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\036\uffe0\040\uffe0\042\uffe0\045\uffe0\050" +
    "\uffe0\051\uffe0\001\002\000\066\006\uffd3\011\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\036\uffd3\040\uffd3\042" +
    "\uffd3\045\uffd3\050\uffd3\051\uffd3\001\002\000\036\013\uffe6" +
    "\014\uffe6\015\077\016\075\017\102\020\100\022\uffe6\023" +
    "\uffe6\033\uffe6\034\uffe6\042\uffe6\045\uffe6\050\uffe6\051\uffe6" +
    "\001\002\000\066\006\uffd9\011\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\036\uffd9\040\uffd9\042\uffd9\045\uffd9" +
    "\050\uffd9\051\uffd9\001\002\000\066\006\uffd2\011\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\036\uffd2\040\uffd2" +
    "\042\uffd2\045\uffd2\050\uffd2\051\uffd2\001\002\000\070\006" +
    "\uffde\011\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\073\036\uffde\040\uffde\042\uffde\045\uffde\050\uffde\051" +
    "\uffde\001\002\000\066\006\uffdf\011\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\036\uffdf\040\uffdf\042\uffdf\045" +
    "\uffdf\050\uffdf\051\uffdf\001\002\000\066\006\uffdd\011\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\036\uffdd\040" +
    "\uffdd\042\uffdd\045\uffdd\050\uffdd\051\uffdd\001\002\000\014" +
    "\013\064\014\067\042\063\050\071\051\070\001\002\000" +
    "\014\015\077\016\075\017\102\020\100\036\076\001\002" +
    "\000\014\013\uffc6\014\uffc6\042\uffc6\050\uffc6\051\uffc6\001" +
    "\002\000\066\006\uffda\011\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\036\uffda\040\uffda\042\uffda\045\uffda\050" +
    "\uffda\051\uffda\001\002\000\014\013\uffc7\014\uffc7\042\uffc7" +
    "\050\uffc7\051\uffc7\001\002\000\014\013\uffc4\014\uffc4\042" +
    "\uffc4\050\uffc4\051\uffc4\001\002\000\014\013\064\014\067" +
    "\042\063\050\071\051\104\001\002\000\014\013\uffc5\014" +
    "\uffc5\042\uffc5\050\uffc5\051\uffc5\001\002\000\066\006\uffdb" +
    "\011\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\036" +
    "\uffdb\040\uffdb\042\uffdb\045\uffdb\050\uffdb\051\uffdb\001\002" +
    "\000\066\006\uffde\011\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\036\uffde\040\uffde\042\uffde\045\uffde\050\uffde" +
    "\051\uffde\001\002\000\016\011\037\021\046\024\042\025" +
    "\035\032\031\050\047\001\002\000\040\006\053\011\uffc8" +
    "\015\077\016\075\017\102\020\100\021\uffc8\024\uffc8\025" +
    "\uffc8\026\055\027\056\030\054\031\060\032\uffc8\050\uffc8" +
    "\001\002\000\014\013\064\014\067\042\063\050\071\051" +
    "\070\001\002\000\026\011\uffc9\015\077\016\075\017\102" +
    "\020\100\021\uffc9\024\uffc9\025\uffc9\032\uffc9\050\uffc9\001" +
    "\002\000\010\022\113\023\114\045\112\001\002\000\014" +
    "\022\uffcd\023\uffcd\033\uffcd\034\uffcd\045\uffcd\001\002\000" +
    "\014\013\064\014\067\042\063\050\071\051\070\001\002" +
    "\000\016\011\037\021\046\024\042\025\035\032\031\050" +
    "\047\001\002\000\004\045\116\001\002\000\014\022\uffcb" +
    "\023\uffcb\033\uffcb\034\uffcb\045\uffcb\001\002\000\016\011" +
    "\037\021\046\024\042\025\035\032\031\050\047\001\002" +
    "\000\006\023\122\045\121\001\002\000\014\022\uffcc\023" +
    "\uffcc\033\uffcc\034\uffcc\045\uffcc\001\002\000\016\011\037" +
    "\021\046\024\042\025\035\032\031\050\047\001\002\000" +
    "\004\045\124\001\002\000\014\022\uffca\023\uffca\033\uffca" +
    "\034\uffca\045\uffca\001\002\000\020\013\064\014\067\036" +
    "\131\040\127\042\063\050\071\051\070\001\002\000\004" +
    "\036\135\001\002\000\014\013\064\014\067\042\063\050" +
    "\071\051\070\001\002\000\026\013\064\014\067\015\077" +
    "\016\075\017\102\020\100\040\127\042\063\050\071\051" +
    "\070\001\002\000\066\006\uffd7\011\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\036\uffd7\040\uffd7\042\uffd7\045" +
    "\uffd7\050\uffd7\051\uffd7\001\002\000\004\036\uffd6\001\002" +
    "\000\030\013\064\014\067\015\077\016\075\017\102\020" +
    "\100\036\uffd4\040\127\042\063\050\071\051\070\001\002" +
    "\000\004\036\uffd5\001\002\000\066\006\uffd8\011\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\036\uffd8\040\uffd8" +
    "\042\uffd8\045\uffd8\050\uffd8\051\uffd8\001\002\000\014\015" +
    "\077\016\075\017\102\020\100\034\137\001\002\000\014" +
    "\022\uffce\023\uffce\033\uffce\034\uffce\045\uffce\001\002\000" +
    "\004\041\141\001\002\000\012\007\022\010\024\011\021" +
    "\012\023\001\002\000\026\006\053\022\uffe8\023\uffe8\026" +
    "\055\027\056\030\054\031\060\033\uffe8\034\uffe8\045\uffe8" +
    "\001\002\000\014\022\uffe9\023\uffe9\033\uffe9\034\uffe9\045" +
    "\uffe9\001\002\000\020\011\037\021\046\024\042\025\035" +
    "\032\031\033\ufff2\050\047\001\002\000\004\033\ufff3\001" +
    "\002\000\004\037\150\001\002\000\004\036\154\001\002" +
    "\000\006\037\152\051\151\001\002\000\004\037\153\001" +
    "\002\000\004\036\uffcf\001\002\000\004\036\uffd0\001\002" +
    "\000\004\034\155\001\002\000\014\022\uffd1\023\uffd1\033" +
    "\uffd1\034\uffd1\045\uffd1\001\002\000\012\007\022\010\024" +
    "\011\021\012\023\001\002\000\004\032\031\001\002\000" +
    "\004\005\ufffd\001\002\000\004\051\017\001\002\000\004" +
    "\036\ufffb\001\002\000\004\002\001\001\002\000\004\032" +
    "\031\001\002\000\004\002\ufffc\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\162\001\001\000" +
    "\002\001\001\000\006\007\015\010\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\027\001\001\000\004" +
    "\012\031\001\001\000\026\006\042\012\037\013\047\014" +
    "\035\015\032\016\040\023\050\026\044\030\043\031\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\042\021" +
    "\065\022\135\023\071\025\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\042\021" +
    "\065\022\105\023\071\025\061\032\104\001\001\000\006" +
    "\017\060\020\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\042\021\065\022\064" +
    "\023\071\025\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\042\021\065\022\073\023\071" +
    "\025\061\001\001\000\004\033\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\042\021\102\023\071\025\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\006\042\012\037\014\110\015\032\016\040\023\050\026" +
    "\044\030\043\031\033\001\001\000\010\017\060\020\106" +
    "\033\100\001\001\000\014\006\042\021\065\022\107\023" +
    "\071\025\061\001\001\000\004\033\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\042\021\065\022" +
    "\105\023\071\025\061\032\116\001\001\000\024\006\042" +
    "\012\037\014\114\015\032\016\040\023\050\026\044\030" +
    "\043\031\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\042\012\037\014\117\015\032\016\040\023" +
    "\050\026\044\030\043\031\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\042\012\037\014\122\015" +
    "\032\016\040\023\050\026\044\030\043\031\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\042\021" +
    "\065\022\127\023\071\024\125\025\061\001\001\000\002" +
    "\001\001\000\014\006\042\021\065\022\132\023\071\025" +
    "\061\001\001\000\020\006\042\021\065\022\127\023\071" +
    "\024\131\025\061\033\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\042\021\065\022\127\023\071" +
    "\024\133\025\061\033\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\141\001\001\000\006\017" +
    "\060\020\142\001\001\000\002\001\001\000\026\006\042" +
    "\012\037\013\144\014\035\015\032\016\040\023\050\026" +
    "\044\030\043\031\033\001\001\000\002\001\001\000\004" +
    "\027\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\156\001\001\000" +
    "\004\012\157\001\001\000\002\001\001\000\004\010\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\164\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // mixtape ::= mixtape_verse nochill_verse fire_verse 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mixtape",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= mixtape EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mixtape_verse ::= MIXTAPE IDENTIFIER DOLLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mixtape_verse",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // nochill_verse ::= IDENTIFIER LPAREN formal_homies RPAREN COLON playa block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nochill_verse",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nochill_verse ::= IDENTIFIER LPAREN RPAREN COLON playa block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nochill_verse",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fire_verse ::= FIRE block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fire_verse",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // formal_homies ::= formal_homie HASHTAG formal_homie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_homies",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formal_homies ::= formal_homie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_homies",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // formal_homie ::= IDENTIFIER COLON playa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_homie",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // playa ::= BONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("playa",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // playa ::= WORDONTHASTREET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("playa",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // playa ::= DAB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("playa",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // playa ::= PARTY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("playa",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // block ::= TURNUP block_verse DEAD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // block_verse ::= track DOLLA block_verse 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_verse",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // block_verse ::= track DOLLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_verse",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // block_verse ::= track 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_verse",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // track ::= block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // track ::= local_dab_verse 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // track ::= aka_track 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // track ::= bounce_track 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // track ::= check_track 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // track ::= preach_track 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // track ::= basedgod_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // local_dab_verse ::= DAB STREETNAME COLON playa aka 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_dab_verse",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // local_dab_verse ::= DAB STREETNAME COLON playa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_dab_verse",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // aka_track ::= STREETNAME aka 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aka_track",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // aka ::= AKA beat_left 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aka",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // aka ::= aka_check 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aka",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // aka_check ::= WEAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aka_check",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // aka_check ::= WINNING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aka_check",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // aka_check ::= ONMYLEVEL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aka_check",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // aka_check ::= OTHERLEVEL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aka_check",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // beat ::= DIGIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // beat ::= STREETNAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // beat ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // beat ::= basedgod_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // beat ::= party_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // beat_left ::= beat_left hustle beat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat_left",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // beat_left ::= IDENTIFIER LPAREN beat_left RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat_left",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // beat_left ::= beat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat_left",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // basedgod_call ::= flame LPAREN basedgod_homies RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basedgod_call",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // basedgod_call ::= flame LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basedgod_call",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // basedgod_homies ::= beat_left basedgod_homies 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basedgod_homies",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // basedgod_homies ::= HASHTAG beat_left basedgod_homies 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basedgod_homies",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // basedgod_homies ::= HASHTAG beat_left 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basedgod_homies",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // party_literal ::= LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("party_literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // party_literal ::= NOTLIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("party_literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // preach_track ::= PREACH LPAREN wordonthastreetverse RPAREN DOLLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("preach_track",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // wordonthastreetverse ::= QM IDENTIFIER QM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("wordonthastreetverse",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // wordonthastreetverse ::= QM QM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("wordonthastreetverse",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bounce_track ::= BOUNCE beat_left DOLLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bounce_track",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // check_track ::= CHECK lit_beat track SON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("check_track",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // check_track ::= CHECK lit_beat track REK lit_beat track SON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("check_track",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // check_track ::= CHECK lit_beat track YOSEWF track SON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("check_track",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // check_track ::= CHECK lit_beat track REK lit_beat track YOSEWF track SON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("check_track",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lit_beat ::= beat_left aka beat_left 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lit_beat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lit_beat ::= beat_left 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lit_beat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // hustle ::= GETMONEY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hustle",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // hustle ::= THROWMONEY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hustle",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // hustle ::= BALLOUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hustle",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // hustle ::= CUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hustle",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
